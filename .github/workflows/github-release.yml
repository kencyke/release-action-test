name: GitHub Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    if: github.event.pull_request.merged == true
    steps:
      - name: Check out repository code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Extract tag name
        id: extract_tag_name
        run: |
          if [[ ${{ github.head_ref }} =~ release\/(v[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "tag_name=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "No semantic version found in branch name."
          fi
      - name: Push tag
        uses: mathieudutour/github-tag-action@fcfbdceb3093f6d85a3b194740f8c6cec632f4e2 # v6.1
        if: steps.extract_tag_name.outputs.tag_name != ''
        id: push_tag
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.extract_tag_name.outputs.tag_name }}
          tag_prefix: ""
      - name: Create release
        uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5 # v1.14.0
        id: create_release
        if: steps.push_tag.outputs.new_tag != ''
        with:
          tag: ${{ steps.push_tag.outputs.new_tag }}
          name: ${{ steps.push_tag.outputs.new_tag }}
          generateReleaseNotes: true
      - name: Decide a branch name created from develop to merge main
        id: decide_branch
        run: |
          branch=main-back-to-develop-${{ github.event.pull_request.head.sha }}
          echo "branch=${branch}" >> "$GITHUB_OUTPUT"
      - name: Create PR from a branch created from develop and merged main to develop branch
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const {owner, repo} = context.repo
            const mainBranch = "main"
            const devBranch = "develop"

            // fetch commit sha of develop branch
            const {data} = await github.rest.git.getRef({
              owner,
              repo,
              ref: `heads/${devBranch}`,
            })

            // create a new branch
            const branch = "${{ steps.decide_branch.outputs.branch }}"
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/heads/${branch}`,
              sha: data.object.sha,
            })

            const {actor, payload} = context
            const {title, number} = payload.pull_request

            // merge main into a new branch
            await github.rest.repos.merge({
              owner,
              repo,
              base: branch,
              head: mainBranch,
              commit_message: `Back merge #${number} to ${devBranch} branch`,
            })

            // create a pull request
            const pull = await github.rest.pulls.create({
              owner,
              repo,
              base: devBranch,
              head: branch,
              title: `[${title}] Merge ${mainBranch} to ${devBranch}`,
              body: `Back merge #${number} to ${devBranch} branch`,
            })

            // assign an actor as reviewer
            github.rest.pulls.requestReviewers({
              owner,
              repo,
              pull_number: pull.data.number,
              reviewers: [actor],
            })
